import 'movie_model.dart';

class SeriesApiModel {
  final String
  id; // Chang√© de int √† String pour g√©rer les IDs comme "tmdb_93405"
  final int tmdbId;
  final String title;
  final String sortTitle;
  final int year;
  final String status;
  final String overview;
  final String network;
  final String airTime;
  final String poster;
  final String banner;
  final String fanart;
  final double rating;
  final String certification;
  final List<String> genres;
  final int runtime;
  final String premiered;
  final bool ended;
  final bool isAvailable;
  final bool monitored;
  final String path;
  final EpisodeStats episodeStats;
  final SeasonInfo seasonInfo;
  final String? imdbId;
  final int? tvdbId;
  final int? tvMazeId;
  final MovieCast? cast;
  final MovieGallery? gallery;
  // Cache des √©pisodes par saison
  final Map<int, List<EpisodeApiModel>> episodesBySeason;

  SeriesApiModel({
    required this.id, // Maintenant un String
    required this.tmdbId,
    required this.title,
    required this.sortTitle,
    required this.year,
    required this.status,
    required this.overview,
    required this.network,
    required this.airTime,
    required this.poster,
    required this.banner,
    required this.fanart,
    required this.rating,
    required this.certification,
    required this.genres,
    required this.runtime,
    required this.premiered,
    required this.ended,
    required this.isAvailable,
    required this.monitored,
    required this.path,
    required this.episodeStats,
    required this.seasonInfo,
    this.imdbId,
    this.tvdbId,
    this.tvMazeId,
    this.cast,
    this.gallery,
    this.episodesBySeason = const {},
  });

  factory SeriesApiModel.fromJson(Map<String, dynamic> json) {
    // Extraire les images directement depuis la r√©ponse JSON
    // D'apr√®s la r√©ponse de l'API, ces champs sont disponibles directement
    String poster = json['poster'] ?? '';
    String banner = json['banner'] ?? '';
    String fanart = json['fanart'] ?? '';

    // Si les champs directs sont vides, essayer de les extraire depuis le tableau images (fallback)
    if (poster.isEmpty || banner.isEmpty || fanart.isEmpty) {
      final List<dynamic> images = json['images'] ?? [];
      print('üñºÔ∏è Images trouv√©es pour ${json['title']}: ${images.length}');

      for (var image in images) {
        final String coverType = image['coverType'] ?? '';
        final String remoteUrl = image['remoteUrl'] ?? '';

        print('   - $coverType: $remoteUrl');

        // Prendre uniquement les remoteUrl (comme pour les films)
        if (remoteUrl.isNotEmpty) {
          switch (coverType) {
            case 'poster':
              if (poster.isEmpty) poster = remoteUrl;
              print('   ‚úÖ Poster assign√©: $poster');
              break;
            case 'banner':
              if (banner.isEmpty) banner = remoteUrl;
              print('   ‚úÖ Banner assign√©: $banner');
              break;
            case 'fanart':
              if (fanart.isEmpty) fanart = remoteUrl;
              print('   ‚úÖ Fanart assign√©: $fanart');
              break;
          }
        }
      }
    } else {
      print(
        'üñºÔ∏è Images r√©cup√©r√©es directement depuis la r√©ponse JSON pour ${json['title']}',
      );
      print('   üì∏ Poster: ${poster.isNotEmpty ? "‚úÖ" : "‚ùå"} $poster');
      print('   üé≠ Banner: ${banner.isNotEmpty ? "‚úÖ" : "‚ùå"} $banner');
      print('   üñºÔ∏è Fanart: ${fanart.isNotEmpty ? "‚úÖ" : "‚ùå"} $fanart');
    }

    // Extraire les √©pisodes si disponibles dans la r√©ponse
    Map<int, List<EpisodeApiModel>> episodesBySeason = {};
    if (json['episodes'] != null) {
      final List<dynamic> episodesData = json['episodes'] as List<dynamic>;
      for (var episodeData in episodesData) {
        final episode = EpisodeApiModel.fromJson(episodeData);
        final seasonNumber = episode.seasonNumber;
        if (!episodesBySeason.containsKey(seasonNumber)) {
          episodesBySeason[seasonNumber] = [];
        }
        episodesBySeason[seasonNumber]!.add(episode);
      }

      // Trier les √©pisodes par num√©ro d'√©pisode dans chaque saison
      for (var seasonNumber in episodesBySeason.keys) {
        episodesBySeason[seasonNumber]!.sort(
          (a, b) => a.episodeNumber.compareTo(b.episodeNumber),
        );
      }

      print(
        'üì∫ ${episodesBySeason.length} saisons avec √©pisodes trouv√©es dans la r√©ponse API',
      );
    }

    // Extraire les √©pisodes depuis seasonInfo.seasons[].episodes (nouvelle structure)
    if (json['seasonInfo'] != null && json['seasonInfo']['seasons'] != null) {
      final List<dynamic> seasonsData =
          json['seasonInfo']['seasons'] as List<dynamic>;
      for (var seasonData in seasonsData) {
        if (seasonData['episodes'] != null) {
          final int seasonNumber = seasonData['number'] ?? 0;
          final List<dynamic> seasonEpisodesData =
              seasonData['episodes'] as List<dynamic>;

          if (!episodesBySeason.containsKey(seasonNumber)) {
            episodesBySeason[seasonNumber] = [];
          }

          for (var episodeData in seasonEpisodesData) {
            // Adapter la structure des √©pisodes pour correspondre √† EpisodeApiModel
            final adaptedEpisodeData = {
              'id': episodeData['id'],
              'seriesId': json['id'],
              'seasonNumber': seasonNumber,
              'episodeNumber': episodeData['episodeNumber'],
              'title': episodeData['title'],
              'overview': episodeData['overview'] ?? '',
              'airDate': episodeData['airDate'] ?? '',
              'airDateUtc': episodeData['airDateUtc'] ?? '',
              'runtime': episodeData['runtime'] ?? 0,
              'rating': episodeData['ratings']?['value'] ?? 0.0,
              'hasFile': episodeData['hasFile'] ?? false,
              'monitored': episodeData['monitored'] ?? false,
              'images':
                  episodeData['gallery']?['stills']
                      ?.map(
                        (still) => {
                          'coverType': 'still',
                          'remoteUrl': still['filePath'] ?? still['url'] ?? '',
                          'localUrl': still['thumbUrl'],
                        },
                      )
                      .toList() ??
                  [],
              'stillPath': episodeData['stillPath'],
            };

            try {
              final episode = EpisodeApiModel.fromJson(adaptedEpisodeData);
              episodesBySeason[seasonNumber]!.add(episode);
            } catch (e) {
              print('‚ö†Ô∏è Erreur lors de la cr√©ation de l\'√©pisode: $e');
            }
          }

          // Trier les √©pisodes par num√©ro d'√©pisode
          episodesBySeason[seasonNumber]!.sort(
            (a, b) => a.episodeNumber.compareTo(b.episodeNumber),
          );
        }
      }

      print(
        'üì∫ ${episodesBySeason.length} saisons avec √©pisodes extraites depuis seasonInfo',
      );
    }

    return SeriesApiModel(
      id: json['id']?.toString() ?? '0', // Convertir en String
      tmdbId: json['tmdbId'] ?? 0,
      title: json['title'] ?? '',
      sortTitle: json['sortTitle'] ?? '',
      year: json['year'] ?? 0,
      status: json['status'] ?? '',
      overview: json['overview'] ?? '',
      network: json['network'] ?? '',
      airTime: json['airTime'] ?? '',
      poster: poster,
      banner: banner,
      fanart: fanart,
      rating: (json['rating'] ?? 0.0).toDouble(),
      certification: json['certification'] ?? '',
      genres: List<String>.from(json['genres'] ?? []),
      runtime: json['runtime'] ?? 0,
      premiered: json['premiered'] ?? '',
      ended: json['ended'] ?? false,
      isAvailable: json['isAvailable'] ?? false,
      monitored: json['monitored'] ?? false,
      path: json['path'] ?? '',
      episodeStats: EpisodeStats.fromJson(json['episodeStats'] ?? {}),
      seasonInfo: SeasonInfo.fromJson(json['seasonInfo'] ?? {}),
      imdbId: json['imdbId'],
      tvdbId: json['tvdbId'],
      tvMazeId: json['tvMazeId'],
      cast: json['cast'] != null ? MovieCast.fromJson(json['cast']) : null,
      gallery: json['gallery'] != null
          ? MovieGallery.fromJson(json['gallery'])
          : null,
      episodesBySeason: episodesBySeason,
    );

    // Log final pour v√©rifier les images r√©cup√©r√©es
    print('üé¨ S√©rie cr√©√©e: ${json['title']}');
    print('   üì∏ Poster final: ${poster.isEmpty ? "‚ùå VIDE" : "‚úÖ " + poster}');
    print('   üé≠ Banner final: ${banner.isEmpty ? "‚ùå VIDE" : "‚úÖ " + banner}');
    print('   üñºÔ∏è Fanart final: ${fanart.isEmpty ? "‚ùå VIDE" : "‚úÖ " + fanart}');
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id, // D√©j√† un String maintenant
      'tmdbId': tmdbId,
      'title': title,
      'sortTitle': sortTitle,
      'year': year,
      'status': status,
      'overview': overview,
      'network': network,
      'airTime': airTime,
      'poster': poster,
      'banner': banner,
      'fanart': fanart,
      'rating': rating,
      'certification': certification,
      'genres': genres,
      'runtime': runtime,
      'premiered': premiered,
      'ended': ended,
      'isAvailable': isAvailable,
      'monitored': monitored,
      'path': path,
      'episodeStats': episodeStats.toJson(),
      'seasonInfo': seasonInfo.toJson(),
      'imdbId': imdbId,
      'tvdbId': tvdbId,
      'tvMazeId': tvMazeId,
      'cast': cast?.toJson(),
      'gallery': gallery?.toJson(),
      'episodesBySeason': episodesBySeason.map(
        (key, value) =>
            MapEntry(key.toString(), value.map((e) => e.toJson()).toList()),
      ),
    };
  }

  // M√©thode pour obtenir les √©pisodes d'une saison sp√©cifique
  List<EpisodeApiModel> getEpisodesForSeason(int seasonNumber) {
    return episodesBySeason[seasonNumber] ?? [];
  }

  // M√©thode pour v√©rifier si une saison a des √©pisodes en cache
  bool hasEpisodesForSeason(int seasonNumber) {
    return episodesBySeason.containsKey(seasonNumber) &&
        episodesBySeason[seasonNumber]!.isNotEmpty;
  }

  // M√©thode pour ajouter des √©pisodes √† une saison
  SeriesApiModel withEpisodesForSeason(
    int seasonNumber,
    List<EpisodeApiModel> episodes,
  ) {
    final newEpisodesBySeason = Map<int, List<EpisodeApiModel>>.from(
      episodesBySeason,
    );
    newEpisodesBySeason[seasonNumber] = episodes;

    return SeriesApiModel(
      id: id,
      tmdbId: tmdbId,
      title: title,
      sortTitle: sortTitle,
      year: year,
      status: status,
      overview: overview,
      network: network,
      airTime: airTime,
      poster: poster,
      banner: banner,
      fanart: fanart,
      rating: rating,
      certification: certification,
      genres: genres,
      runtime: runtime,
      premiered: premiered,
      ended: ended,
      isAvailable: isAvailable,
      monitored: monitored,
      path: path,
      episodeStats: episodeStats,
      seasonInfo: seasonInfo,
      imdbId: imdbId,
      tvdbId: tvdbId,
      tvMazeId: tvMazeId,
      cast: cast,
      gallery: gallery,
      episodesBySeason: newEpisodesBySeason,
    );
  }

  // M√©thode pour convertir SeriesApiModel en SeriesModel
  SeriesModel toSeriesModel() {
    return SeriesModel(
      id: id, // D√©j√† un String maintenant
      title: title,
      imagePath: poster.isNotEmpty
          ? poster
          : fanart.isNotEmpty
          ? fanart
          : banner,
      genre: genres.isNotEmpty ? genres.first : 'Action',
      seasons: '${seasonInfo.totalSeasons} saisons',
      years: year.toString(),
      rating: rating,
      description: overview,
    );
  }

  // M√©thode pour cr√©er un SeasonModel avec les images de la saison
  SeasonModel? getSeasonModel(int seasonNumber) {
    // Chercher la saison dans seasonInfo.seasons
    final season = seasonInfo.seasons
        .where((s) => s.number == seasonNumber)
        .firstOrNull;

    if (season == null) {
      print('‚ö†Ô∏è Saison $seasonNumber non trouv√©e dans la s√©rie $title');
      return null;
    }

    // Convertir les √©pisodes de cette saison en EpisodeModel
    final seasonEpisodes = getEpisodesForSeason(seasonNumber);
    final episodeModels = seasonEpisodes
        .map((episode) => episode.toEpisodeModel())
        .toList();

    // Cr√©er le SeasonModel avec les images de la saison
    final seasonModel = season.toSeasonModel(
      seriesTitle: title,
      seriesYear: year,
      seriesRating: rating,
      seriesOverview: overview,
      episodesList: episodeModels,
    );

    print('üé¨ SeasonModel cr√©√© pour la saison $seasonNumber:');
    print('   üì∏ Poster: ${seasonModel.poster ?? "Non disponible"}');
    print('   üñºÔ∏è Fanart: ${seasonModel.fanart ?? "Non disponible"}');
    print('   üé≠ Banner: ${seasonModel.banner ?? "Non disponible"}');
    print('   üì∫ √âpisodes: ${episodeModels.length}');

    return seasonModel;
  }
}

class EpisodeStats {
  final int total;
  final int available;
  final int monitored;
  final double percentageDownloaded;

  EpisodeStats({
    required this.total,
    required this.available,
    required this.monitored,
    required this.percentageDownloaded,
  });

  factory EpisodeStats.fromJson(Map<String, dynamic> json) {
    return EpisodeStats(
      total: json['total'] ?? 0,
      available: json['available'] ?? 0,
      monitored: json['monitored'] ?? 0,
      percentageDownloaded: (json['percentageDownloaded'] ?? 0.0).toDouble(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'total': total,
      'available': available,
      'monitored': monitored,
      'percentageDownloaded': percentageDownloaded,
    };
  }
}

class SeasonInfo {
  final int totalSeasons;
  final int currentSeason;
  final List<Season> seasons;

  SeasonInfo({
    required this.totalSeasons,
    required this.currentSeason,
    required this.seasons,
  });

  factory SeasonInfo.fromJson(Map<String, dynamic> json) {
    return SeasonInfo(
      totalSeasons: json['totalSeasons'] ?? 0,
      currentSeason: json['currentSeason'] ?? 0,
      seasons:
          (json['seasons'] as List<dynamic>?)
              ?.map((season) => Season.fromJson(season))
              .toList() ??
          [],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'totalSeasons': totalSeasons,
      'currentSeason': currentSeason,
      'seasons': seasons.map((season) => season.toJson()).toList(),
    };
  }
}

class Season {
  final int number;
  final String title;
  final bool monitored;
  final int episodeCount;
  final int episodeFileCount;
  final int monitoredCount;
  final double percentComplete;
  final int sizeOnDisk;
  final double sizeOnDiskGB;
  final String poster;
  final String banner;
  final String fanart;

  Season({
    required this.number,
    required this.title,
    required this.monitored,
    required this.episodeCount,
    required this.episodeFileCount,
    required this.monitoredCount,
    required this.percentComplete,
    required this.sizeOnDisk,
    required this.sizeOnDiskGB,
    required this.poster,
    required this.banner,
    required this.fanart,
  });

  factory Season.fromJson(Map<String, dynamic> json) {
    // Extraire les images depuis la structure season
    String poster = json['poster'] ?? '';
    String banner = json['banner'] ?? '';
    String fanart = json['fanart'] ?? '';

    print('üñºÔ∏è Processing saison ${json['number']} - ${json['title']}');

    // Si les champs directs sont vides, essayer de les extraire depuis l'objet images
    if (poster.isEmpty || banner.isEmpty || fanart.isEmpty) {
      final Map<String, dynamic>? imagesMap = json['images'];

      if (imagesMap != null) {
        print('   üì∏ Images map trouv√©e avec cl√©s: ${imagesMap.keys.toList()}');

        // Extraire les posters
        if (imagesMap['posters'] is List && poster.isEmpty) {
          final List<dynamic> posters = imagesMap['posters'] as List<dynamic>;
          if (posters.isNotEmpty) {
            poster = posters.first['url'] ?? posters.first['filePath'] ?? '';
            print('   ‚úÖ Poster de saison depuis images: $poster');
          }
        }

        // Extraire les banners
        if (imagesMap['banners'] is List && banner.isEmpty) {
          final List<dynamic> banners = imagesMap['banners'] as List<dynamic>;
          if (banners.isNotEmpty) {
            banner = banners.first['url'] ?? banners.first['filePath'] ?? '';
            print('   ‚úÖ Banner de saison depuis images: $banner');
          }
        }

        // Extraire les fanarts
        if (imagesMap['fanart'] is List && fanart.isEmpty) {
          final List<dynamic> fanarts = imagesMap['fanart'] as List<dynamic>;
          if (fanarts.isNotEmpty) {
            fanart = fanarts.first['url'] ?? fanarts.first['filePath'] ?? '';
            print('   ‚úÖ Fanart de saison depuis images: $fanart');
          }
        }
      } else {
        // Fallback : essayer l'ancien format (tableau images)
        final List<dynamic> images = json['images'] ?? [];
        print(
          '   üìã Fallback: Images trouv√©es pour la saison ${json['number']}: ${images.length}',
        );

        for (var image in images) {
          final String coverType = image['coverType'] ?? '';
          final String remoteUrl = image['remoteUrl'] ?? '';

          print('     - $coverType: $remoteUrl');

          if (remoteUrl.isNotEmpty) {
            switch (coverType) {
              case 'poster':
                if (poster.isEmpty) poster = remoteUrl;
                print('     ‚úÖ Poster de saison assign√©: $poster');
                break;
              case 'banner':
                if (banner.isEmpty) banner = remoteUrl;
                print('     ‚úÖ Banner de saison assign√©: $banner');
                break;
              case 'fanart':
                if (fanart.isEmpty) fanart = remoteUrl;
                print('     ‚úÖ Fanart de saison assign√©: $fanart');
                break;
            }
          }
        }
      }
    } else {
      print(
        '   üì∏ Images r√©cup√©r√©es directement depuis les champs poster/banner/fanart',
      );
    }

    return Season(
      number: json['number'] ?? 0,
      title: json['title'] ?? '',
      monitored: json['monitored'] ?? false,
      episodeCount: json['episodeCount'] ?? 0,
      episodeFileCount: json['episodeFileCount'] ?? 0,
      monitoredCount: json['monitoredCount'] ?? 0,
      percentComplete: (json['percentComplete'] ?? 0.0).toDouble(),
      sizeOnDisk: json['sizeOnDisk'] ?? 0,
      sizeOnDiskGB: (json['sizeOnDiskGB'] ?? 0.0).toDouble(),
      poster: poster,
      banner: banner,
      fanart: fanart,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'number': number,
      'title': title,
      'monitored': monitored,
      'episodeCount': episodeCount,
      'episodeFileCount': episodeFileCount,
      'monitoredCount': monitoredCount,
      'percentComplete': percentComplete,
      'sizeOnDisk': sizeOnDisk,
      'sizeOnDiskGB': sizeOnDiskGB,
      'poster': poster,
      'banner': banner,
      'fanart': fanart,
    };
  }

  // M√©thode pour convertir vers SeasonModel avec les images
  SeasonModel toSeasonModel({
    required String seriesTitle,
    required int seriesYear,
    required double seriesRating,
    required String seriesOverview,
    required List<EpisodeModel> episodesList,
  }) {
    return SeasonModel(
      id: number.toString(),
      title: title.isNotEmpty ? title : 'Saison $number',
      imagePath: poster.isNotEmpty ? poster : '', // Poster par d√©faut
      poster: poster.isNotEmpty ? poster : null,
      fanart: fanart.isNotEmpty ? fanart : null,
      banner: banner.isNotEmpty ? banner : null,
      episodes: '$episodeCount √©pisodes',
      year: seriesYear.toString(),
      rating: seriesRating,
      description: seriesOverview,
      episodesList: episodesList,
    );
  }
}

// Mod√®le pour les donn√©es TMDB d'un √©pisode
class EpisodeTmdbData {
  final int tmdbId;
  final String name;
  final String overview;
  final String airDate;
  final int episodeNumber;
  final int seasonNumber;
  final String stillPath;
  final double voteAverage;
  final int voteCount;
  final int runtime;
  final List<dynamic> crew;
  final List<dynamic> guestStars;

  EpisodeTmdbData({
    required this.tmdbId,
    required this.name,
    required this.overview,
    required this.airDate,
    required this.episodeNumber,
    required this.seasonNumber,
    required this.stillPath,
    required this.voteAverage,
    required this.voteCount,
    required this.runtime,
    required this.crew,
    required this.guestStars,
  });

  factory EpisodeTmdbData.fromJson(Map<String, dynamic> json) {
    return EpisodeTmdbData(
      tmdbId: json['tmdbId'] ?? 0,
      name: json['name'] ?? '',
      overview: json['overview'] ?? '',
      airDate: json['airDate'] ?? '',
      episodeNumber: json['episodeNumber'] ?? 0,
      seasonNumber: json['seasonNumber'] ?? 0,
      stillPath: json['stillPath'] ?? '',
      voteAverage: (json['voteAverage'] ?? 0.0).toDouble(),
      voteCount: json['voteCount'] ?? 0,
      runtime: json['runtime'] ?? 0,
      crew: json['crew'] ?? [],
      guestStars: json['guestStars'] ?? [],
    );
  }
}

// Mod√®le pour les informations de fichier d'√©pisode
class EpisodeFileInfo {
  final int id;
  final String fileName;
  final String fullPath; // Chemin complet du fichier
  final String relativePath; // Chemin relatif
  final int size; // Taille en bytes
  final double sizeGB; // Taille en GB
  final EpisodeQuality quality;
  final EpisodeMediaInfo mediaInfo;

  EpisodeFileInfo({
    required this.id,
    required this.fileName,
    required this.fullPath,
    required this.relativePath,
    required this.size,
    required this.sizeGB,
    required this.quality,
    required this.mediaInfo,
  });

  factory EpisodeFileInfo.fromJson(Map<String, dynamic> json) {
    return EpisodeFileInfo(
      id: json['id'] ?? 0,
      fileName: json['fileName'] ?? '',
      fullPath: json['fullPath'] ?? '',
      relativePath: json['relativePath'] ?? '',
      size: json['size'] ?? 0,
      sizeGB: (json['sizeGB'] ?? 0.0).toDouble(),
      quality: EpisodeQuality.fromJson(json['quality'] ?? {}),
      mediaInfo: EpisodeMediaInfo.fromJson(json['mediaInfo'] ?? {}),
    );
  }
}

class EpisodeQuality {
  final String name;
  final String resolution;

  EpisodeQuality({required this.name, required this.resolution});

  factory EpisodeQuality.fromJson(Map<String, dynamic> json) {
    return EpisodeQuality(
      name: json['name'] ?? '',
      resolution: json['resolution'] ?? '',
    );
  }
}

class EpisodeMediaInfo {
  final String videoCodec;
  final String audioCodec;
  final String resolution;
  final int videoFps;
  final int audioChannels;
  final List<String> audioLanguages;
  final List<String> subtitles;

  EpisodeMediaInfo({
    required this.videoCodec,
    required this.audioCodec,
    required this.resolution,
    required this.videoFps,
    required this.audioChannels,
    required this.audioLanguages,
    required this.subtitles,
  });

  factory EpisodeMediaInfo.fromJson(Map<String, dynamic> json) {
    return EpisodeMediaInfo(
      videoCodec: json['videoCodec'] ?? '',
      audioCodec: json['audioCodec'] ?? '',
      resolution: json['resolution'] ?? '',
      videoFps: json['videoFps'] ?? 0,
      audioChannels: json['audioChannels'] ?? 0,
      audioLanguages: List<String>.from(json['audioLanguages'] ?? []),
      subtitles: List<String>.from(json['subtitles'] ?? []),
    );
  }
}

// Mod√®le pour les √©pisodes de l'API
class EpisodeApiModel {
  final int id;
  final int seriesId;
  final int seasonNumber;
  final int episodeNumber;
  final String title;
  final String overview;
  final String airDate;
  final String airDateUtc;
  final int runtime;
  final double rating;
  final bool hasFile;
  final bool monitored;
  final String? absoluteEpisodeNumber;
  final String? unverifiedSceneNumbering;
  final EpisodeFile? episodeFile;
  final List<EpisodeImage> images;
  final String? stillPath; // Nouveau champ pour la nouvelle structure
  final EpisodeTmdbData? tmdbData; // Donn√©es TMDB avec informations en fran√ßais
  final EpisodeFileInfo? file; // Informations du fichier d'√©pisode

  EpisodeApiModel({
    required this.id,
    required this.seriesId,
    required this.seasonNumber,
    required this.episodeNumber,
    required this.title,
    required this.overview,
    required this.airDate,
    required this.airDateUtc,
    required this.runtime,
    required this.rating,
    required this.hasFile,
    required this.monitored,
    this.absoluteEpisodeNumber,
    this.unverifiedSceneNumbering,
    this.episodeFile,
    required this.images,
    this.stillPath,
    this.tmdbData,
    this.file,
  });

  factory EpisodeApiModel.fromJson(Map<String, dynamic> json) {
    // Extraire les donn√©es TMDB si disponibles
    EpisodeTmdbData? tmdbData;
    if (json['tmdbData'] != null) {
      tmdbData = EpisodeTmdbData.fromJson(json['tmdbData']);
      print(
        'üá´üá∑ Donn√©es TMDB trouv√©es pour l\'√©pisode ${json['episodeNumber']}',
      );
      print('   üìù Overview TMDB: ${tmdbData.overview}');
      print('   üé¨ Titre TMDB: ${tmdbData.name}');
    }

    // Prioriser l'overview en fran√ßais depuis TMDB
    String episodeTitle = json['title'] ?? '';
    String episodeOverview = json['overview'] ?? '';
    String episodeStillPath = json['stillPath'];
    int episodeRuntime = json['runtime'] ?? 0;
    double episodeRating = (json['rating'] ?? 0.0).toDouble();

    // Si les donn√©es TMDB sont disponibles, les utiliser en priorit√©
    if (tmdbData != null) {
      // Prioriser le titre TMDB s'il est disponible
      if (tmdbData.name.isNotEmpty) {
        episodeTitle = tmdbData.name;
        print('   ‚úÖ Titre TMDB utilis√©: $episodeTitle');
      }

      // Prioriser l'overview TMDB s'il est disponible
      if (tmdbData.overview.isNotEmpty) {
        episodeOverview = tmdbData.overview;
        print('   ‚úÖ Overview TMDB utilis√©: $episodeOverview');
      }

      // Prioriser le stillPath TMDB s'il est disponible
      if (tmdbData.stillPath.isNotEmpty) {
        episodeStillPath = tmdbData.stillPath;
        print('   ‚úÖ StillPath TMDB utilis√©: $episodeStillPath');
      }

      // Prioriser le runtime TMDB s'il est disponible
      if (tmdbData.runtime > 0) {
        episodeRuntime = tmdbData.runtime;
        print('   ‚úÖ Runtime TMDB utilis√©: $episodeRuntime');
      }

      // Prioriser le vote average TMDB s'il est disponible
      if (tmdbData.voteAverage > 0) {
        episodeRating = tmdbData.voteAverage;
        print('   ‚úÖ Rating TMDB utilis√©: $episodeRating');
      }
    }

    // Debug: afficher la structure des donn√©es de l'√©pisode
    print('üîç Structure des donn√©es de l\'√©pisode:');
    print('   hasFile: ${json['hasFile']}');
    print('   episodeFile: ${json['episodeFile']}');
    print('   file: ${json['file']}');
    print('   data: ${json['data']}');

    // Debug: afficher toutes les cl√©s disponibles
    print('üîë Toutes les cl√©s disponibles:');
    json.keys.forEach((key) {
      print('   - $key: ${json[key]}');
    });

    // Extraire les informations du fichier d'√©pisode
    EpisodeFileInfo? episodeFile;

    // Essayer diff√©rents chemins pour trouver les donn√©es du fichier
    Map<String, dynamic>? fileData;

    if (json['file'] != null) {
      fileData = json['file'] as Map<String, dynamic>;
      print('üìÅ Donn√©es trouv√©es dans "file"');
    } else if (json['data'] != null && json['data']['file'] != null) {
      fileData = json['data']['file'] as Map<String, dynamic>;
      print('üìÅ Donn√©es trouv√©es dans "data.file"');
    } else if (json['episodeFile'] != null) {
      fileData = json['episodeFile'] as Map<String, dynamic>;
      print('üìÅ Donn√©es trouv√©es dans "episodeFile"');
    }

    if (fileData != null) {
      episodeFile = EpisodeFileInfo.fromJson(fileData);
      print('üìÅ Fichier d\'√©pisode trouv√©: ${episodeFile.fileName}');
      print('   üìä Taille: ${episodeFile.sizeGB}GB');
      print(
        '   üé¨ Qualit√©: ${episodeFile.quality.name} (${episodeFile.quality.resolution}p)',
      );
      print('   üìÇ Chemin complet: ${episodeFile.fullPath}');
      print('   üìÇ Chemin relatif: ${episodeFile.relativePath}');
    } else {
      print('‚ùå Aucune donn√©e de fichier trouv√©e');
    }

    // Extraire les images d'√©pisode
    List<EpisodeImage> episodeImages = [];
    String? stillPath = episodeStillPath;

    // Traiter les images depuis le tableau images standard
    if (json['images'] != null) {
      episodeImages = (json['images'] as List<dynamic>)
          .map((image) => EpisodeImage.fromJson(image))
          .toList();
    }

    // Traiter les images depuis la galerie (nouvelle structure)
    if (json['gallery'] != null && json['gallery']['stills'] != null) {
      final List<dynamic> galleryStills =
          json['gallery']['stills'] as List<dynamic>;

      for (var still in galleryStills) {
        final String filePath = still['filePath'] ?? still['url'] ?? '';
        final String thumbUrl = still['thumbUrl'] ?? '';

        if (filePath.isNotEmpty) {
          episodeImages.add(
            EpisodeImage(
              coverType: 'still',
              remoteUrl: filePath,
              localUrl: thumbUrl.isNotEmpty ? thumbUrl : null,
            ),
          );
        }
      }

      // Si stillPath n'est pas d√©fini, prendre la premi√®re image de la galerie
      if (stillPath == null || stillPath.isEmpty) {
        if (galleryStills.isNotEmpty) {
          stillPath =
              galleryStills.first['filePath'] ??
              galleryStills.first['url'] ??
              '';
        }
      }
    }

    print(
      'üì∫ √âpisode ${json['episodeNumber']}: ${episodeImages.length} images trouv√©es',
    );
    if (stillPath != null && stillPath.isNotEmpty) {
      print('   üñºÔ∏è StillPath final: $stillPath');
    }

    return EpisodeApiModel(
      id: json['id'] ?? 0,
      seriesId: json['seriesId'] ?? 0,
      seasonNumber: json['seasonNumber'] ?? 0,
      episodeNumber: json['episodeNumber'] ?? 0,
      title: episodeTitle,
      overview: episodeOverview,
      airDate: json['airDate'] ?? '',
      airDateUtc: json['airDateUtc'] ?? '',
      runtime: episodeRuntime,
      rating: episodeRating,
      hasFile: json['hasFile'] ?? false,
      monitored: json['monitored'] ?? false,
      absoluteEpisodeNumber: json['absoluteEpisodeNumber']?.toString(),
      unverifiedSceneNumbering: json['unverifiedSceneNumbering']?.toString(),
      episodeFile: json['episodeFile'] != null
          ? EpisodeFile.fromJson(json['episodeFile'])
          : null,
      images: episodeImages,
      stillPath: stillPath,
      tmdbData: tmdbData,
      file: episodeFile,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'seriesId': seriesId,
      'seasonNumber': seasonNumber,
      'episodeNumber': episodeNumber,
      'title': title,
      'overview': overview,
      'airDate': airDate,
      'airDateUtc': airDateUtc,
      'runtime': runtime,
      'rating': rating,
      'hasFile': hasFile,
      'monitored': monitored,
      'absoluteEpisodeNumber': absoluteEpisodeNumber,
      'unverifiedSceneNumbering': unverifiedSceneNumbering,
      'episodeFile': episodeFile?.toJson(),
      'images': images.map((image) => image.toJson()).toList(),
      'stillPath': stillPath,
      'tmdbData': tmdbData != null
          ? {
              'tmdbId': tmdbData!.tmdbId,
              'name': tmdbData!.name,
              'overview': tmdbData!.overview,
              'airDate': tmdbData!.airDate,
              'episodeNumber': tmdbData!.episodeNumber,
              'seasonNumber': tmdbData!.seasonNumber,
              'stillPath': tmdbData!.stillPath,
              'voteAverage': tmdbData!.voteAverage,
              'voteCount': tmdbData!.voteCount,
              'runtime': tmdbData!.runtime,
              'crew': tmdbData!.crew,
              'guestStars': tmdbData!.guestStars,
            }
          : null,
      'file': file != null
          ? {
              'id': file!.id,
              'fileName': file!.fileName,
              'sizeGB': file!.sizeGB,
              'quality': {
                'name': file!.quality.name,
                'resolution': file!.quality.resolution,
              },
              'mediaInfo': {
                'videoCodec': file!.mediaInfo.videoCodec,
                'audioCodec': file!.mediaInfo.audioCodec,
                'resolution': file!.mediaInfo.resolution,
                'videoFps': file!.mediaInfo.videoFps,
                'audioChannels': file!.mediaInfo.audioChannels,
                'audioLanguages': file!.mediaInfo.audioLanguages,
                'subtitles': file!.mediaInfo.subtitles,
              },
              'fullPath': file!.fullPath,
              'relativePath': file!.relativePath,
              'size': file!.size,
            }
          : null,
    };
  }

  // M√©thode pour convertir vers EpisodeModel
  EpisodeModel toEpisodeModel() {
    String imagePath = '';

    // Priorit√© 1: stillPath (nouvelle structure)
    if (stillPath != null && stillPath!.isNotEmpty) {
      imagePath = stillPath!;
      print('üì∏ √âpisode $episodeNumber: Utilisation du stillPath: $imagePath');
    }
    // Priorit√© 2: images du mod√®le (chercher une image de type still ou screenshot)
    else if (images.isNotEmpty) {
      // Chercher une image de type still en priorit√©
      final still = images.where((img) => img.coverType == 'still').firstOrNull;
      if (still != null && still.remoteUrl.isNotEmpty) {
        imagePath = still.remoteUrl;
        print(
          'üì∏ √âpisode $episodeNumber: Utilisation d\'une image still: $imagePath',
        );
      } else {
        // Fallback sur screenshot
        final screenshot = images
            .where((img) => img.coverType == 'screenshot')
            .firstOrNull;
        if (screenshot != null && screenshot.remoteUrl.isNotEmpty) {
          imagePath = screenshot.remoteUrl;
          print(
            'üì∏ √âpisode $episodeNumber: Utilisation d\'une image screenshot: $imagePath',
          );
        } else {
          // Prendre la premi√®re image disponible
          final firstImage = images.firstWhere(
            (img) => img.remoteUrl.isNotEmpty,
            orElse: () => EpisodeImage(coverType: '', remoteUrl: ''),
          );
          if (firstImage.remoteUrl.isNotEmpty) {
            imagePath = firstImage.remoteUrl;
            print(
              'üì∏ √âpisode $episodeNumber: Utilisation de la premi√®re image disponible: $imagePath',
            );
          }
        }
      }
    }

    if (imagePath.isEmpty) {
      print('‚ö†Ô∏è √âpisode $episodeNumber: Aucune image trouv√©e');
    }

    return EpisodeModel(
      id: id.toString(),
      title: title,
      imagePath: imagePath,
      duration: '${runtime} min',
      description: overview,
      episodeNumber: episodeNumber,
      rating: rating,
    );
  }

  // M√©thode pour r√©cup√©rer l'image principale de l'√©pisode
  String getMainImage() {
    // Priorit√© 1: stillPath
    if (stillPath != null && stillPath!.isNotEmpty) {
      return stillPath!;
    }

    // Priorit√© 2: image de type still
    final still = images.where((img) => img.coverType == 'still').firstOrNull;
    if (still != null && still.remoteUrl.isNotEmpty) {
      return still.remoteUrl;
    }

    // Priorit√© 3: image de type screenshot
    final screenshot = images
        .where((img) => img.coverType == 'screenshot')
        .firstOrNull;
    if (screenshot != null && screenshot.remoteUrl.isNotEmpty) {
      return screenshot.remoteUrl;
    }

    // Priorit√© 4: premi√®re image disponible
    final firstImage = images.firstWhere(
      (img) => img.remoteUrl.isNotEmpty,
      orElse: () => EpisodeImage(coverType: '', remoteUrl: ''),
    );

    return firstImage.remoteUrl;
  }

  // M√©thode pour r√©cup√©rer toutes les images de l'√©pisode
  List<String> getAllImages() {
    List<String> allImages = [];

    // Ajouter stillPath s'il existe
    if (stillPath != null && stillPath!.isNotEmpty) {
      allImages.add(stillPath!);
    }

    // Ajouter toutes les images du tableau images
    for (var image in images) {
      if (image.remoteUrl.isNotEmpty && !allImages.contains(image.remoteUrl)) {
        allImages.add(image.remoteUrl);
      }
    }

    return allImages;
  }
}

class EpisodeFile {
  final int id;
  final int seriesId;
  final int seasonNumber;
  final int episodeNumber;
  final String path;
  final String relativePath;
  final String fileName;
  final int size;
  final String dateAdded;
  final String quality;
  final String qualityVersion;
  final String releaseGroup;
  final String sceneName;

  EpisodeFile({
    required this.id,
    required this.seriesId,
    required this.seasonNumber,
    required this.episodeNumber,
    required this.path,
    required this.relativePath,
    required this.fileName,
    required this.size,
    required this.dateAdded,
    required this.quality,
    required this.qualityVersion,
    required this.releaseGroup,
    required this.sceneName,
  });

  factory EpisodeFile.fromJson(Map<String, dynamic> json) {
    return EpisodeFile(
      id: json['id'] ?? 0,
      seriesId: json['seriesId'] ?? 0,
      seasonNumber: json['seasonNumber'] ?? 0,
      episodeNumber: json['episodeNumber'] ?? 0,
      path: json['path'] ?? '',
      relativePath: json['relativePath'] ?? '',
      fileName: json['fileName'] ?? '',
      size: json['size'] ?? 0,
      dateAdded: json['dateAdded'] ?? '',
      quality: json['quality']?['quality']?['name'] ?? '',
      qualityVersion:
          json['quality']?['revision']?['version']?.toString() ?? '',
      releaseGroup: json['releaseGroup'] ?? '',
      sceneName: json['sceneName'] ?? '',
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'seriesId': seriesId,
      'seasonNumber': seasonNumber,
      'episodeNumber': episodeNumber,
      'path': path,
      'relativePath': relativePath,
      'fileName': fileName,
      'size': size,
      'dateAdded': dateAdded,
      'quality': quality,
      'qualityVersion': qualityVersion,
      'releaseGroup': releaseGroup,
      'sceneName': sceneName,
    };
  }
}

class EpisodeImage {
  final String coverType;
  final String remoteUrl;
  final String? localUrl;

  EpisodeImage({
    required this.coverType,
    required this.remoteUrl,
    this.localUrl,
  });

  factory EpisodeImage.fromJson(Map<String, dynamic> json) {
    return EpisodeImage(
      coverType: json['coverType'] ?? '',
      remoteUrl: json['remoteUrl'] ?? '',
      localUrl: json['localUrl'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'coverType': coverType,
      'remoteUrl': remoteUrl,
      'localUrl': localUrl,
    };
  }
}
