import '../models/tv_channel_model.dart';
import 'api_client.dart';

class TvChannelService {
  // R√©cup√©rer toutes les cha√Ænes TV avec pagination
  static Future<List<TvChannelModel>> getAllChannels({
    int page = 1,
    int limit = 50,
  }) async {
    try {
      print('üì∫ R√©cup√©ration des cha√Ænes TV - Page $page, Limite $limit');

      final channels = await ApiClient.getAllTvChannels<TvChannelModel>(
        page: page,
        limit: limit,
        fromJson: TvChannelModel.fromJson,
      );

      // Filtrer le contenu NSFW
      final filteredChannels = channels
          .where((channel) => !channel.isNsfw)
          .toList();

      print(
        '‚úÖ Cha√Ænes TV r√©cup√©r√©es: ${channels.length} (${filteredChannels.length} apr√®s filtrage NSFW)',
      );
      return filteredChannels;
    } catch (e) {
      print('‚ùå Erreur getAllChannels: $e');
      return [];
    }
  }

  // R√©cup√©rer un nombre limit√© de cha√Ænes pour la page d'accueil
  static Future<List<TvChannelModel>> getHomeChannels({int limit = 8}) async {
    try {
      print('üì∫ R√©cup√©ration des cha√Ænes TV d\'accueil - Limite $limit');

      final channels = await ApiClient.getHomeTvChannels<TvChannelModel>(
        limit: limit,
        fromJson: TvChannelModel.fromJson,
      );

      // Filtrer le contenu NSFW
      final filteredChannels = channels
          .where((channel) => !channel.isNsfw)
          .toList();

      print('‚úÖ Cha√Ænes TV d\'accueil r√©cup√©r√©es: ${filteredChannels.length}');
      return filteredChannels;
    } catch (e) {
      print('‚ùå Erreur getHomeChannels: $e');
      return [];
    }
  }

  // R√©cup√©rer les cha√Ænes filtr√©es par cat√©gorie
  static Future<List<TvChannelModel>> getChannelsByCategory(
    String category,
  ) async {
    try {
      print('üì∫ R√©cup√©ration des cha√Ænes TV par cat√©gorie: $category');

      final channels = await ApiClient.getTvChannelsByCategory<TvChannelModel>(
        category,
        limit: 100,
        fromJson: TvChannelModel.fromJson,
      );

      // Filtrer le contenu NSFW
      final filteredChannels = channels
          .where((channel) => !channel.isNsfw)
          .toList();

      print(
        '‚úÖ Cha√Ænes TV par cat√©gorie "$category": ${filteredChannels.length}',
      );
      return filteredChannels;
    } catch (e) {
      print('‚ùå Erreur getChannelsByCategory: $e');
      return [];
    }
  }

  // R√©cup√©rer toutes les cha√Ænes (multi-pages)
  static Future<List<TvChannelModel>> getAllChannelsMultiPage({
    int maxPages = 5,
    int limitPerPage = 50,
  }) async {
    try {
      print(
        'üì∫ R√©cup√©ration multi-pages des cha√Ænes TV - Max $maxPages pages, $limitPerPage par page',
      );

      final channels =
          await ApiClient.getAllTvChannelsMultiPage<TvChannelModel>(
            maxPages: maxPages,
            limitPerPage: limitPerPage,
            fromJson: TvChannelModel.fromJson,
          );

      // Filtrer le contenu NSFW
      final filteredChannels = channels
          .where((channel) => !channel.isNsfw)
          .toList();

      print('‚úÖ Total cha√Ænes TV multi-pages: ${filteredChannels.length}');
      return filteredChannels;
    } catch (e) {
      print('‚ùå Erreur getAllChannelsMultiPage: $e');
      return [];
    }
  }

  // R√©cup√©rer une cha√Æne par ID
  static Future<TvChannelModel?> getChannelById(String channelId) async {
    try {
      print('üì∫ R√©cup√©ration de la cha√Æne TV par ID: $channelId');

      final response = await ApiClient.getTvChannelById<TvChannelModel>(
        channelId,
        fromJson: TvChannelModel.fromJson,
      );

      if (response.isSuccess && response.data != null) {
        final channel = response.data!;
        if (!channel.isNsfw) {
          print('‚úÖ Cha√Æne TV r√©cup√©r√©e: ${channel.name}');
          return channel;
        } else {
          print('‚ö†Ô∏è Cha√Æne TV NSFW filtr√©e: ${channel.name}');
          return null;
        }
      } else {
        print('‚ùå Cha√Æne TV non trouv√©e: $channelId');
        return null;
      }
    } catch (e) {
      print('‚ùå Erreur getChannelById: $e');
      return null;
    }
  }

  // Obtenir la liste des cat√©gories disponibles
  static Future<List<String>> getAvailableCategories() async {
    try {
      print('üì∫ R√©cup√©ration des cat√©gories de cha√Ænes TV disponibles');

      final categories = await ApiClient.getTvChannelCategories<TvChannelModel>(
        sampleSize: 100,
        fromJson: TvChannelModel.fromJson,
        getCategory: (channel) => channel.category,
      );

      print('‚úÖ Cat√©gories disponibles: ${categories.length}');
      return categories;
    } catch (e) {
      print('‚ùå Erreur getAvailableCategories: $e');
      return [
        'Toutes',
        'G√©n√©ralistes',
        'Sport',
        'Info',
        'Divertissement',
        'Cin√©ma',
        'Documentaires',
      ];
    }
  }

  // Tester la connectivit√© avec le serveur
  static Future<bool> testConnection() async {
    try {
      print('üß™ Test de connectivit√© des cha√Ænes TV');

      final isConnected = await ApiClient.testConnection();

      print(
        isConnected
            ? '‚úÖ Connectivit√© cha√Ænes TV confirm√©e'
            : '‚ùå Test de connexion cha√Ænes TV √©chou√©',
      );
      return isConnected;
    } catch (e) {
      print('‚ùå Test de connexion cha√Ænes TV √©chou√©: $e');
      return false;
    }
  }

  // M√©thode utilitaire pour mapper les cat√©gories (pour compatibilit√©)
  static bool _mapCategoryToFilter(String apiCategory, String filterCategory) {
    final apiCat = apiCategory.toLowerCase();
    final filterCat = filterCategory.toLowerCase();

    switch (filterCat) {
      case 'g√©n√©ralistes':
        return apiCat.contains('general') ||
            apiCat.contains('entertainment') ||
            apiCat.contains('variety');
      case 'sport':
        return apiCat.contains('sport');
      case 'info':
        return apiCat.contains('news') || apiCat.contains('info');
      case 'divertissement':
        return apiCat.contains('entertainment') ||
            apiCat.contains('reality') ||
            apiCat.contains('variety');
      case 'cin√©ma':
        return apiCat.contains('movie') ||
            apiCat.contains('cinema') ||
            apiCat.contains('film');
      case 'documentaires':
        return apiCat.contains('documentary') ||
            apiCat.contains('education') ||
            apiCat.contains('culture');
      default:
        return false;
    }
  }
}
