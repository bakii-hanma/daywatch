import 'dart:convert';
import 'package:http/http.dart' as http;
import '../config/server_config.dart';

/// Client API centralis√© pour toutes les requ√™tes vers le serveur
class ApiClient {
  /// URL de base du serveur API (depuis ServerConfig)
  static String get baseUrl => ServerConfig.apiBaseUrl;

  /// Endpoints de l'API
  static const String _radarrPrefix = '/api/radarr';
  static const String _sonarrPrefix = '/api/sonarr';

  // ====== ENDPOINTS RADARR (FILMS) ======
  static const String _moviesRecent = '$_radarrPrefix/movies/recent';
  static const String _moviesPopular = '$_radarrPrefix/movies/popular';
  static const String _moviesBase = '$_radarrPrefix/movies';
  static const String _moviesBoxOffice = '$_radarrPrefix/movies/boxoffice';

  // ====== ENDPOINTS SONARR (S√âRIES) ======
  static const String _seriesRecent = '$_sonarrPrefix/series/recent';
  static const String _seriesPopular = '$_sonarrPrefix/series/popular';
  static const String _seriesBase = '$_sonarrPrefix/series';

  // ====== ENDPOINTS TRAILERS ======
  static const String _trailersPrefix = '/api/trailers';
  static const String _trailersRecent = '$_trailersPrefix/recent';

  // ====== ENDPOINTS CHA√éNES TV ======
  static const String _tvChannelsPrefix = '/api/iptv-org';
  static const String _tvChannelsAll = '$_tvChannelsPrefix/channels/all';
  static const String _tvChannelsBase = '$_tvChannelsPrefix/channels';

  // ====== ENDPOINTS UTILISATEURS (AUTH) ======
  static const String _usersPrefix = '/api/users';
  static const String _registerEndpoint = '$_usersPrefix/register';
  static const String _loginEndpoint = '$_usersPrefix/login';

  /// URL de base pour l'API utilisateurs
  static String get usersBaseUrl => ServerConfig.usersApiBaseUrl;

  /// URL compl√®te pour l'inscription
  static String get registerUrl => '{$usersBaseUrl}$_registerEndpoint';

  /// URL compl√®te pour la connexion
  static String get loginUrl => '{$usersBaseUrl}$_loginEndpoint';

  /// URLs compl√®tes des endpoints - Films (Radarr) - Pour compatibilit√© externe
  static String get recentMoviesUrl => '$baseUrl$_moviesRecent';
  static String get popularMoviesUrl => '$baseUrl$_moviesPopular';
  static String get allMoviesUrl => '$baseUrl$_moviesBase';
  static String get boxOfficeMoviesUrl => '$baseUrl$_moviesBoxOffice';

  /// URLs compl√®tes des endpoints - S√©ries (Sonarr) - Pour compatibilit√© externe
  static String get recentSeriesUrl => '$baseUrl$_seriesRecent';
  static String get popularSeriesUrl => '$baseUrl$_seriesPopular';
  static String get allSeriesUrl => '$baseUrl$_seriesBase';

  /// URLs compl√®tes des endpoints - Trailers - Pour compatibilit√© externe
  static String get recentTrailersUrl => '$baseUrl$_trailersRecent';

  /// URLs compl√®tes des endpoints - Cha√Ænes TV - Pour compatibilit√© externe
  static String get allTvChannelsUrl => '$baseUrl$_tvChannelsAll';
  static String get tvChannelsBaseUrl => '$baseUrl$_tvChannelsBase';

  /// Headers par d√©faut pour toutes les requ√™tes
  static Map<String, String> get _defaultHeaders => {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers':
        'Origin, Content-Type, Accept, Authorization, X-Request-With',
    'User-Agent':
        'Mozilla/5.0 (Android; Mobile) AppleWebKit/537.36 KHTML/Gecko Chrome/91.0 Mobile Safari/537.36',
    'Accept-Encoding': 'gzip, deflate',
    'Accept-Language': 'fr-FR,fr;q=0.9,en;q=0.8',
    'Cache-Control': 'no-cache',
    'Pragma': 'no-cache',
  };

  /// Timeout par d√©faut pour les requ√™tes
  static const Duration defaultTimeout = Duration(seconds: 30);

  /// Timeout sp√©cifique pour les s√©ries (plus long car plus de donn√©es)
  static const Duration seriesTimeout = Duration(seconds: 60);

  /// Instance singleton du client HTTP
  static final http.Client _httpClient = http.Client();

  /// Effectuer une requ√™te GET
  static Future<ApiResponse<T>> get<T>(
    String endpoint, {
    Map<String, String>? headers,
    Duration? timeout,
    T Function(Map<String, dynamic>)? fromJson,
  }) async {
    try {
      final url = endpoint.startsWith('http') ? endpoint : '$baseUrl$endpoint';

      print('üåê GET: $url');

      final response = await _httpClient
          .get(Uri.parse(url), headers: {..._defaultHeaders, ...?headers})
          .timeout(timeout ?? defaultTimeout);

      print('üì° Statut: ${response.statusCode}');

      return _handleResponse<T>(response, fromJson);
    } catch (e) {
      print('‚ùå Erreur GET: $e');
      return ApiResponse.error('Erreur de connexion: $e');
    }
  }

  /// Effectuer une requ√™te POST
  static Future<ApiResponse<T>> post<T>(
    String endpoint, {
    Map<String, dynamic>? body,
    Map<String, String>? headers,
    Duration? timeout,
    T Function(Map<String, dynamic>)? fromJson,
  }) async {
    try {
      final url = endpoint.startsWith('http') ? endpoint : '$baseUrl$endpoint';

      print('üåê POST: $url');

      final response = await _httpClient
          .post(
            Uri.parse(url),
            headers: {..._defaultHeaders, ...?headers},
            body: body != null ? jsonEncode(body) : null,
          )
          .timeout(timeout ?? defaultTimeout);

      print('üì° Statut: ${response.statusCode}');

      return _handleResponse<T>(response, fromJson);
    } catch (e) {
      print('‚ùå Erreur POST: $e');
      return ApiResponse.error('Erreur de connexion: $e');
    }
  }

  /// Traiter la r√©ponse HTTP
  static ApiResponse<T> _handleResponse<T>(
    http.Response response,
    T Function(Map<String, dynamic>)? fromJson,
  ) {
    try {
      if (response.statusCode >= 200 && response.statusCode < 300) {
        final dynamic jsonData = jsonDecode(response.body);

        print('üîç Type de r√©ponse JSON: ${jsonData.runtimeType}');
        if (jsonData is Map<String, dynamic>) {
          print('üîç Cl√©s disponibles: ${jsonData.keys.toList()}');
        }

        // Si c'est une Map avec success/data (format API standard)
        if (jsonData is Map<String, dynamic> &&
            jsonData.containsKey('success')) {
          if (jsonData['success'] == true) {
            if (fromJson != null && jsonData['data'] != null) {
              final result = fromJson(jsonData['data']);
              return ApiResponse.success(result);
            } else {
              return ApiResponse.success(jsonData['data'] as T);
            }
          } else {
            return ApiResponse.error(jsonData['message'] ?? 'Erreur inconnue');
          }
        }
        // Si c'est une Map avec data (nouveau format Sonarr)
        else if (jsonData is Map<String, dynamic> &&
            jsonData.containsKey('data')) {
          // Retourner directement la Map compl√®te pour que les m√©thodes sp√©cialis√©es puissent la traiter
          return ApiResponse.success(jsonData as T);
        }
        // Si c'est directement une liste
        else if (jsonData is List) {
          if (fromJson != null) {
            // Pour les listes, on prend le premier √©l√©ment comme exemple
            if (jsonData.isNotEmpty && jsonData.first is Map<String, dynamic>) {
              final result = fromJson(jsonData.first as Map<String, dynamic>);
              return ApiResponse.success(result);
            }
          }
          return ApiResponse.success(jsonData as T);
        }
        // Si c'est directement un objet Map
        else if (jsonData is Map<String, dynamic>) {
          if (fromJson != null) {
            final result = fromJson(jsonData);
            return ApiResponse.success(result);
          }
          return ApiResponse.success(jsonData as T);
        }
        // Format inattendu
        else {
          print('‚ö†Ô∏è Format de r√©ponse inattendu: ${jsonData.runtimeType}');
          return ApiResponse.success(jsonData as T);
        }
      } else {
        return ApiResponse.error(
          'Erreur HTTP ${response.statusCode}: ${response.body}',
        );
      }
    } catch (e) {
      print('‚ùå Erreur parsing JSON: $e');
      print('üìÑ Contenu de la r√©ponse: ${response.body}');
      return ApiResponse.error('Erreur de format de r√©ponse: $e');
    }
  }

  // ====== M√âTHODES SP√âCIALIS√âES RADARR (FILMS) ======

  /// R√©cup√©rer les films r√©cents
  static Future<List<T>> getRecentMovies<T>({
    int limit = 10,
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    try {
      final endpoint = '$_moviesRecent?limit=$limit';
      final response = await get(endpoint);

      if (response.isSuccess && response.data != null) {
        final List<dynamic> items = response.data as List<dynamic>;
        final List<T> result = items.map((item) => fromJson(item)).toList();
        return result;
      } else {
        print('‚ùå Erreur API films r√©cents: ${response.error}');
        return [];
      }
    } catch (e) {
      print('‚ùå Exception getRecentMovies: $e');
      return [];
    }
  }

  /// R√©cup√©rer les films populaires
  static Future<List<T>> getPopularMovies<T>({
    int limit = 10,
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    try {
      final endpoint = '$_moviesPopular?limit=$limit';
      final response = await get(endpoint);

      if (response.isSuccess && response.data != null) {
        final List<dynamic> items = response.data as List<dynamic>;
        final List<T> result = items.map((item) => fromJson(item)).toList();
        return result;
      } else {
        print('‚ùå Erreur API films populaires: ${response.error}');
        return [];
      }
    } catch (e) {
      print('‚ùå Exception getPopularMovies: $e');
      return [];
    }
  }

  /// R√©cup√©rer tous les films
  static Future<List<T>> getAllMovies<T>({
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    try {
      final endpoint = _moviesBase;
      final response = await get(endpoint);

      if (response.isSuccess && response.data != null) {
        final List<dynamic> items = response.data as List<dynamic>;
        final List<T> result = items.map((item) => fromJson(item)).toList();
        return result;
      } else {
        print('‚ùå Erreur API tous les films: ${response.error}');
        return [];
      }
    } catch (e) {
      print('‚ùå Exception getAllMovies: $e');
      return [];
    }
  }

  /// R√©cup√©rer un film par ID
  static Future<ApiResponse<T?>> getMovieById<T>(
    int movieId, {
    T Function(Map<String, dynamic>)? fromJson,
  }) async {
    final endpoint = '$_moviesBase/$movieId';
    final response = await get<Map<String, dynamic>>(endpoint);

    if (response.isSuccess && response.data != null) {
      final Map<String, dynamic> itemData = response.data!;
      if (fromJson != null && itemData.isNotEmpty) {
        final T result = fromJson(itemData);
        return ApiResponse.success(result);
      } else if (itemData.isNotEmpty) {
        return ApiResponse.success(itemData as T);
      }
    }
    return ApiResponse.error(response.error ?? 'Film non trouv√©');
  }

  /// R√©cup√©rer les films du box office
  static Future<List<T>> getBoxOfficeMovies<T>({
    int limit = 10,
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    try {
      final endpoint = '$_moviesBoxOffice?limit=$limit';
      final response = await get(endpoint);

      if (response.isSuccess && response.data != null) {
        final List<dynamic> items = response.data as List<dynamic>;
        final List<T> result = items.map((item) => fromJson(item)).toList();
        print('üí∞ Films box office r√©cup√©r√©s via ApiClient: ${result.length}');
        return result;
      } else {
        print('‚ùå Erreur API films box office: ${response.error}');
        return [];
      }
    } catch (e) {
      print('‚ùå Exception getBoxOfficeMovies: $e');
      return [];
    }
  }

  // ====== M√âTHODES SP√âCIALIS√âES SONARR (S√âRIES) ======

  /// R√©cup√©rer les s√©ries r√©centes
  static Future<List<T>> getRecentSeries<T>({
    int limit = 10,
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    try {
      final endpoint = '$_seriesRecent?limit=$limit';
      final response = await get<dynamic>(endpoint, timeout: seriesTimeout);

      if (response.isSuccess && response.data != null) {
        List<dynamic> items;

        // G√©rer diff√©rents formats de r√©ponse
        if (response.data is List) {
          // Format direct : liste de s√©ries
          items = response.data as List<dynamic>;
          print('üìã Format de r√©ponse: Liste directe (${items.length} s√©ries)');
        } else if (response.data is Map<String, dynamic>) {
          // Format avec wrapper : { success: true, data: [...], message: "..." }
          final responseMap = response.data as Map<String, dynamic>;

          if (responseMap['data'] is List) {
            items = responseMap['data'] as List<dynamic>;
            print(
              'üìã Format de r√©ponse: Wrapper avec success/data (${items.length} s√©ries)',
            );
            print('üìä Message: ${responseMap['message'] ?? 'Non sp√©cifi√©'}');
            print('üìà Count: ${responseMap['count'] ?? 'Non sp√©cifi√©'}');
          } else if (responseMap['source'] != null) {
            // Format avec wrapper : { data: [...], source: "...", meta: {...} }
            items = responseMap['data'] as List<dynamic>;
            print(
              'üìã Format de r√©ponse: Wrapper avec source/meta (${items.length} s√©ries)',
            );
            print('üìä Source: ${responseMap['source'] ?? 'Non sp√©cifi√©'}');
            print(
              'üìÖ Timestamp: ${responseMap['timestamp'] ?? 'Non sp√©cifi√©'}',
            );
          } else {
            print('‚ö†Ô∏è Format de r√©ponse inattendu: Map sans champ data');
            print('üîç Cl√©s disponibles: ${responseMap.keys.toList()}');
            return [];
          }
        } else {
          print('‚ö†Ô∏è Format de r√©ponse inattendu pour s√©ries r√©centes');
          print('üîç Type re√ßu: ${response.data.runtimeType}');
          return [];
        }

        final List<T> result = items.map((item) => fromJson(item)).toList();
        print('‚úÖ ${result.length} s√©ries r√©centes r√©cup√©r√©es via ApiClient');
        return result;
      } else {
        print('‚ùå Erreur API s√©ries r√©centes: ${response.error}');
        return [];
      }
    } catch (e) {
      print('‚ùå Exception getRecentSeries: $e');
      print('üîç Type d\'erreur: ${e.runtimeType}');
      return [];
    }
  }

  /// R√©cup√©rer les s√©ries populaires
  static Future<List<T>> getPopularSeries<T>({
    int limit = 10,
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    try {
      final endpoint = '$_seriesPopular?limit=$limit';
      final response = await get<dynamic>(endpoint, timeout: seriesTimeout);

      if (response.isSuccess && response.data != null) {
        List<dynamic> items;

        // G√©rer diff√©rents formats de r√©ponse
        if (response.data is List) {
          // Format direct : liste de s√©ries
          items = response.data as List<dynamic>;
          print('üìã Format de r√©ponse: Liste directe (${items.length} s√©ries)');
        } else if (response.data is Map<String, dynamic>) {
          // Format avec wrapper : { success: true, data: [...], message: "..." }
          final responseMap = response.data as Map<String, dynamic>;

          if (responseMap['data'] is List) {
            items = responseMap['data'] as List<dynamic>;
            print(
              'üìã Format de r√©ponse: Wrapper avec success/data (${items.length} s√©ries)',
            );
            print('üìä Message: ${responseMap['message'] ?? 'Non sp√©cifi√©'}');
            print('üìà Count: ${responseMap['count'] ?? 'Non sp√©cifi√©'}');
          } else if (responseMap['source'] != null) {
            // Format avec wrapper : { data: [...], source: "...", meta: {...} }
            items = responseMap['data'] as List<dynamic>;
            print(
              'üìã Format de r√©ponse: Wrapper avec source/meta (${items.length} s√©ries)',
            );
            print('üìä Source: ${responseMap['source'] ?? 'Non sp√©cifi√©'}');
            print(
              'üìÖ Timestamp: ${responseMap['timestamp'] ?? 'Non sp√©cifi√©'}',
            );
          } else {
            print('‚ö†Ô∏è Format de r√©ponse inattendu: Map sans champ data');
            print('üîç Cl√©s disponibles: ${responseMap.keys.toList()}');
            return [];
          }
        } else {
          print('‚ö†Ô∏è Format de r√©ponse inattendu pour s√©ries populaires');
          print('üîç Type re√ßu: ${response.data.runtimeType}');
          return [];
        }

        final List<T> result = items.map((item) => fromJson(item)).toList();
        print('‚úÖ ${result.length} s√©ries populaires r√©cup√©r√©es via ApiClient');
        return result;
      } else {
        print('‚ùå Erreur API s√©ries populaires: ${response.error}');
        return [];
      }
    } catch (e) {
      print('‚ùå Exception getPopularSeries: $e');
      print('üîç Type d\'erreur: ${e.runtimeType}');
      return [];
    }
  }

  /// R√©cup√©rer une s√©rie par ID
  static Future<ApiResponse<T?>> getSeriesById<T>(
    String seriesId, {
    T Function(Map<String, dynamic>)? fromJson,
  }) async {
    final endpoint = '$_seriesBase/$seriesId';
    final response = await get<Map<String, dynamic>>(
      endpoint,
      timeout: seriesTimeout,
    );

    if (response.isSuccess && response.data != null) {
      final Map<String, dynamic> itemData = response.data!;
      if (fromJson != null && itemData.isNotEmpty) {
        final T result = fromJson(itemData);
        return ApiResponse.success(result);
      } else if (itemData.isNotEmpty) {
        return ApiResponse.success(itemData as T);
      }
    }
    return ApiResponse.error(response.error ?? 'S√©rie non trouv√©e');
  }

  // ====== M√âTHODES SP√âCIALIS√âES TRAILERS ======

  /// R√©cup√©rer les trailers r√©cents
  static Future<List<T>> getRecentTrailers<T>({
    int limit = 10,
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    try {
      final endpoint = '$_trailersRecent?limit=$limit';
      final response = await get(endpoint);

      if (response.isSuccess && response.data != null) {
        final List<dynamic> items = response.data as List<dynamic>;
        final List<T> result = items.map((item) => fromJson(item)).toList();
        print('‚úÖ Trailers r√©cup√©r√©s via ApiClient: ${result.length}');
        return result;
      } else {
        print('‚ùå Erreur API trailers r√©cents: ${response.error}');
        return [];
      }
    } catch (e) {
      print('‚ùå Exception getRecentTrailers: $e');
      return [];
    }
  }

  // ====== M√âTHODES SP√âCIALIS√âES CHA√éNES TV ======

  /// R√©cup√©rer toutes les cha√Ænes TV avec pagination
  static Future<List<T>> getAllTvChannels<T>({
    int page = 1,
    int limit = 50,
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    try {
      final endpoint = '$_tvChannelsAll?page=$page&limit=$limit';
      final response = await get(endpoint);

      if (response.isSuccess && response.data != null) {
        final List<dynamic> items = response.data as List<dynamic>;
        final List<T> result = items.map((item) => fromJson(item)).toList();
        print(
          '‚úÖ Cha√Ænes TV r√©cup√©r√©es via ApiClient: ${result.length} (page $page)',
        );
        return result;
      } else {
        print('‚ùå Erreur API cha√Ænes TV: ${response.error}');
        return [];
      }
    } catch (e) {
      print('‚ùå Exception getAllTvChannels: $e');
      return [];
    }
  }

  /// R√©cup√©rer un nombre limit√© de cha√Ænes pour la page d'accueil
  static Future<List<T>> getHomeTvChannels<T>({
    int limit = 8,
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    try {
      final channels = await getAllTvChannels(
        page: 1,
        limit: limit,
        fromJson: fromJson,
      );
      print('‚úÖ Cha√Ænes TV d\'accueil r√©cup√©r√©es: ${channels.length}');
      return channels;
    } catch (e) {
      print('‚ùå Exception getHomeTvChannels: $e');
      return [];
    }
  }

  /// R√©cup√©rer les cha√Ænes TV par cat√©gorie
  static Future<List<T>> getTvChannelsByCategory<T>(
    String category, {
    int limit = 100,
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    try {
      // R√©cup√©rer toutes les cha√Ænes puis filtrer par cat√©gorie
      final allChannels = await getAllTvChannels(
        page: 1,
        limit: limit,
        fromJson: fromJson,
      );

      if (category == 'Toutes' || category.isEmpty) {
        return allChannels;
      }

      final filteredChannels = allChannels.where((channel) {
        // Utiliser la r√©flexion pour acc√©der √† la propri√©t√© category
        // ou impl√©menter une m√©thode de filtrage sp√©cifique
        return _filterChannelByCategory(channel, category);
      }).toList();

      print(
        '‚úÖ Cha√Ænes TV filtr√©es par cat√©gorie "$category": ${filteredChannels.length}',
      );
      return filteredChannels;
    } catch (e) {
      print('‚ùå Exception getTvChannelsByCategory: $e');
      return [];
    }
  }

  /// R√©cup√©rer toutes les cha√Ænes TV (multi-pages)
  static Future<List<T>> getAllTvChannelsMultiPage<T>({
    int maxPages = 5,
    int limitPerPage = 50,
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    try {
      List<T> allChannels = [];

      for (int page = 1; page <= maxPages; page++) {
        final channels = await getAllTvChannels(
          page: page,
          limit: limitPerPage,
          fromJson: fromJson,
        );

        if (channels.isEmpty) {
          // Plus de cha√Ænes disponibles
          break;
        }

        allChannels.addAll(channels);
        print('üìä Page $page: ${channels.length} cha√Ænes r√©cup√©r√©es');
      }

      print('‚úÖ Total cha√Ænes TV r√©cup√©r√©es: ${allChannels.length}');
      return allChannels;
    } catch (e) {
      print('‚ùå Exception getAllTvChannelsMultiPage: $e');
      return [];
    }
  }

  /// R√©cup√©rer une cha√Æne TV par ID
  static Future<ApiResponse<T?>> getTvChannelById<T>(
    String channelId, {
    T Function(Map<String, dynamic>)? fromJson,
  }) async {
    final endpoint = '$_tvChannelsBase/$channelId';
    final response = await get<Map<String, dynamic>>(endpoint);

    if (response.isSuccess && response.data != null) {
      final Map<String, dynamic> itemData = response.data!;
      if (fromJson != null && itemData.isNotEmpty) {
        final T result = fromJson(itemData);
        return ApiResponse.success(result);
      } else if (itemData.isNotEmpty) {
        return ApiResponse.success(itemData as T);
      }
    }
    return ApiResponse.error(response.error ?? 'Cha√Æne TV non trouv√©e');
  }

  /// Obtenir la liste des cat√©gories de cha√Ænes disponibles
  static Future<List<String>> getTvChannelCategories<T>({
    int sampleSize = 100,
    required T Function(Map<String, dynamic>) fromJson,
    required String Function(T) getCategory,
  }) async {
    try {
      // R√©cup√©rer un √©chantillon pour obtenir les cat√©gories
      final sampleChannels = await getAllTvChannels(
        page: 1,
        limit: sampleSize,
        fromJson: fromJson,
      );

      final categories = sampleChannels
          .map((channel) => getCategory(channel))
          .where((category) => category.isNotEmpty)
          .toSet()
          .toList();

      categories.sort();
      final result = ['Toutes', ...categories];
      print('‚úÖ Cat√©gories de cha√Ænes TV disponibles: ${result.length}');
      return result;
    } catch (e) {
      print('‚ùå Exception getTvChannelCategories: $e');
      return [
        'Toutes',
        'G√©n√©ralistes',
        'Sport',
        'Info',
        'Divertissement',
        'Cin√©ma',
        'Documentaires',
      ];
    }
  }

  /// M√©thode utilitaire pour filtrer les cha√Ænes par cat√©gorie
  static bool _filterChannelByCategory<T>(T channel, String category) {
    // Cette m√©thode doit √™tre impl√©ment√©e selon le mod√®le de donn√©es sp√©cifique
    // Pour l'instant, on retourne true pour √©viter les erreurs
    // L'impl√©mentation r√©elle d√©pendra de la structure de TvChannelModel
    return true;
  }

  /// Inscription utilisateur
  static Future<ApiResponse<T>> registerUser<T>({
    required Map<String, dynamic> body,
    T Function(Map<String, dynamic>)? fromJson,
  }) async {
    try {
      final response = await post<T>(
        registerUrl,
        body: body,
        fromJson: fromJson,
      );
      return response;
    } catch (e) {
      print('‚ùå Erreur inscription: $e');
      return ApiResponse.error('Erreur inscription: $e');
    }
  }

  /// Connexion utilisateur
  static Future<ApiResponse<T>> loginUser<T>({
    required Map<String, dynamic> body,
    T Function(Map<String, dynamic>)? fromJson,
  }) async {
    try {
      final response = await post<T>(loginUrl, body: body, fromJson: fromJson);
      return response;
    } catch (e) {
      print('‚ùå Erreur connexion: $e');
      return ApiResponse.error('Erreur connexion: $e');
    }
  }

  /// Tester la connectivit√© avec le serveur
  static Future<bool> testConnection() async {
    try {
      print('üß™ Test de connectivit√© vers: $baseUrl');

      final response = await get(
        _moviesRecent,
        timeout: const Duration(seconds: 10),
      );

      final isConnected = response.isSuccess;
      print(
        isConnected ? '‚úÖ Connectivit√© confirm√©e' : '‚ùå Test de connexion √©chou√©',
      );

      return isConnected;
    } catch (e) {
      print('‚ùå Test de connexion √©chou√©: $e');
      return false;
    }
  }

  /// Obtenir l'URL compl√®te d'un endpoint
  static String getFullUrl(String endpoint) {
    return endpoint.startsWith('http') ? endpoint : '$baseUrl$endpoint';
  }

  /// Nettoyer les ressources
  static void dispose() {
    _httpClient.close();
  }
}

/// Classe pour encapsuler les r√©ponses API
class ApiResponse<T> {
  final bool isSuccess;
  final T? data;
  final String? error;

  ApiResponse.success(this.data) : isSuccess = true, error = null;
  ApiResponse.error(this.error) : isSuccess = false, data = null;

  /// Obtenir les donn√©es ou lancer une exception
  T get dataOrThrow {
    if (isSuccess && data != null) {
      return data!;
    }
    throw Exception(error ?? 'Donn√©es non disponibles');
  }

  /// V√©rifier si la r√©ponse contient des donn√©es
  bool get hasData => isSuccess && data != null;
}
